# This script is used to generate the testdata for the make_v2 test.
import dnaio
from contextlib import ExitStack


rule all:
    input:
        "reads_v2.1.fastq.gz",
        "reads_v2.2.fastq.gz",
        "index_v2.fastq.gz"


rule trim_r1_and_update_header:
    input:
        fq1 = "reads.1.fastq.gz",
        fq2 = "reads.2.fastq.gz"
    output:
        fq = temp("reads_v2.tmp.fastq.gz")
    shell:
        "cutadapt"
        " -g 'XNNNCAGTTGATCATCAGCAGGTAATCTGGNNNNNNNNNNNNNNNNNNNNCATGACCTCTTGGAACTGTCAGATGTGTATAAGAGACAG;min_overlap=85' "
        " -e 0.2"
        " -o {output.fq}" 
        " --interleaved"
        " --discard-untrimmed"
        " --rename '{{id}} {{comment}} {{match_sequence}}'"
        " {input.fq1} {input.fq2}"


rule get_reads:
    input:
        fq = "reads_v2.tmp.fastq.gz",
    output:
        fq1 = "reads_v2.1.fastq.gz",
        fq2 = "reads_v2.2.fastq.gz",
        fq3 = "index_v2.fastq.gz",
    run:
        with ExitStack() as stack:
            reader = stack.enter_context(dnaio.open(input.fq, interleaved=True, mode="r"))
            writer = stack.enter_context(dnaio.open(output.fq1, file2=output.fq2, mode="w"))
            index_writer = stack.enter_context(dnaio.open(output.fq3, mode="w"))
            n = 0
            for read1, read2 in reader:
                name, index, cut_sequence = read1.name.split(" ")
                
                read1.name = f"{name} {index}"
                index_name = f"{name} {index.replace('1:', '3:')}"
                read2.name = f"{name} {index.replace('1:', '4:')}"
                
                writer.write(read1, read2)

                # Prepare index sequence
                cut_sequence_without_tes = cut_sequence[:-19]
                index_read = dnaio.Sequence(
                    index_name, 
                    cut_sequence_without_tes, 
                    "K"*len(cut_sequence_without_tes)
                ).reverse_complement()

                index_writer.write(index_read)
                n += 1
            print(f"Generated {n} reads")
